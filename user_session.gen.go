// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package api

import (
	"context"
	"study-planner-api/internal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserSession(db *gorm.DB, opts ...gen.DOOption) userSession {
	_userSession := userSession{}

	_userSession.userSessionDo.UseDB(db, opts...)
	_userSession.userSessionDo.UseModel(&model.UserSession{})

	tableName := _userSession.userSessionDo.TableName()
	_userSession.ALL = field.NewAsterisk(tableName)
	_userSession.ID = field.NewInt32(tableName, "id")
	_userSession.UserID = field.NewInt32(tableName, "user_id")
	_userSession.RefreshToken = field.NewString(tableName, "refresh_token")
	_userSession.ExpiresAt = field.NewTime(tableName, "expires_at")
	_userSession.CreatedAt = field.NewTime(tableName, "created_at")

	_userSession.fillFieldMap()

	return _userSession
}

type userSession struct {
	userSessionDo userSessionDo

	ALL          field.Asterisk
	ID           field.Int32
	UserID       field.Int32
	RefreshToken field.String
	ExpiresAt    field.Time
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (u userSession) Table(newTableName string) *userSession {
	u.userSessionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSession) As(alias string) *userSession {
	u.userSessionDo.DO = *(u.userSessionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSession) updateTableName(table string) *userSession {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.RefreshToken = field.NewString(table, "refresh_token")
	u.ExpiresAt = field.NewTime(table, "expires_at")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userSession) WithContext(ctx context.Context) *userSessionDo {
	return u.userSessionDo.WithContext(ctx)
}

func (u userSession) TableName() string { return u.userSessionDo.TableName() }

func (u userSession) Alias() string { return u.userSessionDo.Alias() }

func (u userSession) Columns(cols ...field.Expr) gen.Columns { return u.userSessionDo.Columns(cols...) }

func (u *userSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSession) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["refresh_token"] = u.RefreshToken
	u.fieldMap["expires_at"] = u.ExpiresAt
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userSession) clone(db *gorm.DB) userSession {
	u.userSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSession) replaceDB(db *gorm.DB) userSession {
	u.userSessionDo.ReplaceDB(db)
	return u
}

type userSessionDo struct{ gen.DO }

func (u userSessionDo) Debug() *userSessionDo {
	return u.withDO(u.DO.Debug())
}

func (u userSessionDo) WithContext(ctx context.Context) *userSessionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSessionDo) ReadDB() *userSessionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSessionDo) WriteDB() *userSessionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSessionDo) Session(config *gorm.Session) *userSessionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSessionDo) Clauses(conds ...clause.Expression) *userSessionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSessionDo) Returning(value interface{}, columns ...string) *userSessionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSessionDo) Not(conds ...gen.Condition) *userSessionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSessionDo) Or(conds ...gen.Condition) *userSessionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSessionDo) Select(conds ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSessionDo) Where(conds ...gen.Condition) *userSessionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSessionDo) Order(conds ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSessionDo) Distinct(cols ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSessionDo) Omit(cols ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSessionDo) Join(table schema.Tabler, on ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSessionDo) Group(cols ...field.Expr) *userSessionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSessionDo) Having(conds ...gen.Condition) *userSessionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSessionDo) Limit(limit int) *userSessionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSessionDo) Offset(offset int) *userSessionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userSessionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSessionDo) Unscoped() *userSessionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSessionDo) Create(values ...*model.UserSession) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSessionDo) CreateInBatches(values []*model.UserSession, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSessionDo) Save(values ...*model.UserSession) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSessionDo) First() (*model.UserSession, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Take() (*model.UserSession, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Last() (*model.UserSession, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Find() ([]*model.UserSession, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSession), err
}

func (u userSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSession, err error) {
	buf := make([]*model.UserSession, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSessionDo) FindInBatches(result *[]*model.UserSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSessionDo) Attrs(attrs ...field.AssignExpr) *userSessionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSessionDo) Assign(attrs ...field.AssignExpr) *userSessionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSessionDo) Joins(fields ...field.RelationField) *userSessionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSessionDo) Preload(fields ...field.RelationField) *userSessionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSessionDo) FirstOrInit() (*model.UserSession, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) FirstOrCreate() (*model.UserSession, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) FindByPage(offset int, limit int) (result []*model.UserSession, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSessionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSessionDo) Delete(models ...*model.UserSession) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSessionDo) withDO(do gen.Dao) *userSessionDo {
	u.DO = *do.(*gen.DO)
	return u
}
