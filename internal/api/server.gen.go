// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate with Google OAuth2 code
	// (POST /auth/google)
	PostAuthGoogle(ctx echo.Context) error
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error
	// Login to the system
	// (POST /login)
	PostLogin(ctx echo.Context) error
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx echo.Context, params PostLogoutParams) error
	// Get user profile
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// Register a new user
	// (POST /register)
	PostRegister(ctx echo.Context) error
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int32) error
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthGoogle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthGoogle(ctx)
	return err
}

// PostAuthRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefreshToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshTokenParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefreshToken(ctx, params)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLogoutParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogout(ctx, params)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}

// PutTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTasksId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/google", wrapper.PostAuthGoogle)
	router.POST(baseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/logout", wrapper.PostLogout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PUT(baseURL+"/tasks/:id", wrapper.PutTasksId)

}

type UnauthorizedJSONResponse DefaultResponse

type PostAuthGoogleRequestObject struct {
	Body *PostAuthGoogleJSONRequestBody
}

type PostAuthGoogleResponseObject interface {
	VisitPostAuthGoogleResponse(w http.ResponseWriter) error
}

type PostAuthGoogle200JSONResponse AuthTokens

func (response PostAuthGoogle200JSONResponse) VisitPostAuthGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthGoogle400Response struct {
}

func (response PostAuthGoogle400Response) VisitPostAuthGoogleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostAuthRefreshTokenRequestObject struct {
	Params PostAuthRefreshTokenParams
	Body   *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200JSONResponse AuthTokens

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken401Response struct {
}

func (response PostAuthRefreshToken401Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuthRefreshToken403Response struct {
}

func (response PostAuthRefreshToken403Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse AuthTokens

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogoutRequestObject struct {
	Params PostLogoutParams
	Body   *PostLogoutJSONRequestBody
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout200Response struct {
}

func (response PostLogout200Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostLogout401Response struct {
}

func (response PostLogout401Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse User

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfile401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetProfile401JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201JSONResponse AuthTokens

func (response PostRegister201JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse RegisterError

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksRequestObject struct {
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasks401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetTasks401JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks400JSONResponse DefaultResponse

func (response PostTasks400JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostTasks401JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksIdRequestObject struct {
	Id int32 `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(w http.ResponseWriter) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteTasksId401JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksId404JSONResponse DefaultResponse

func (response DeleteTasksId404JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksIdRequestObject struct {
	Id   int32 `json:"id"`
	Body *PutTasksIdJSONRequestBody
}

type PutTasksIdResponseObject interface {
	VisitPutTasksIdResponse(w http.ResponseWriter) error
}

type PutTasksId200Response struct {
}

func (response PutTasksId200Response) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutTasksId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutTasksId401JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksId404JSONResponse DefaultResponse

func (response PutTasksId404JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate with Google OAuth2 code
	// (POST /auth/google)
	PostAuthGoogle(ctx context.Context, request PostAuthGoogleRequestObject) (PostAuthGoogleResponseObject, error)
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Login to the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Get user profile
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Register a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx context.Context, request PutTasksIdRequestObject) (PutTasksIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthGoogle operation middleware
func (sh *strictHandler) PostAuthGoogle(ctx echo.Context) error {
	var request PostAuthGoogleRequestObject

	var body PostAuthGoogleJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthGoogle(ctx.Request().Context(), request.(PostAuthGoogleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthGoogle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthGoogleResponseObject); ok {
		return validResponse.VisitPostAuthGoogleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error {
	var request PostAuthRefreshTokenRequestObject

	request.Params = params

	var body PostAuthRefreshTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx.Request().Context(), request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		return validResponse.VisitPostAuthRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx echo.Context) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.Request().Context(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		return validResponse.VisitPostLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx echo.Context, params PostLogoutParams) error {
	var request PostLogoutRequestObject

	request.Params = params

	var body PostLogoutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.Request().Context(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		return validResponse.VisitPostLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx echo.Context) error {
	var request GetProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx.Request().Context(), request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		return validResponse.VisitGetProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx echo.Context) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.Request().Context(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		return validResponse.VisitPostRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context) error {
	var request GetTasksRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx echo.Context, id int32) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.Request().Context(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		return validResponse.VisitDeleteTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTasksId operation middleware
func (sh *strictHandler) PutTasksId(ctx echo.Context, id int32) error {
	var request PutTasksIdRequestObject

	request.Id = id

	var body PutTasksIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksId(ctx.Request().Context(), request.(PutTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTasksIdResponseObject); ok {
		return validResponse.VisitPutTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
