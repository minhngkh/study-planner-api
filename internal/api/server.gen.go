// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Activate user account
	// (POST /activation/)
	PostActivation(ctx echo.Context) error
	// Send activation email
	// (POST /activation/email)
	PostActivationEmail(ctx echo.Context) error
	// Get focus session analytics
	// (GET /analytics/focus)
	GetAnalyticsFocus(ctx echo.Context, params GetAnalyticsFocusParams) error
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx echo.Context) error
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error
	// Request password reset email
	// (POST /auth/password-reset)
	PostAuthPasswordReset(ctx echo.Context) error
	// Reset password using token
	// (POST /auth/password-reset/confirm)
	PostAuthPasswordResetConfirm(ctx echo.Context) error
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error
	// Start a new focus session
	// (POST /focus-sessions)
	PostFocusSessions(ctx echo.Context) error
	// End an active focus session
	// (POST /focus-sessions/{id}/end)
	PostFocusSessionsIdEnd(ctx echo.Context, id int32) error
	// Login to the system
	// (POST /login)
	PostLogin(ctx echo.Context) error
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx echo.Context, params PostLogoutParams) error
	// Get user profile
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// Register a new user
	// (POST /register)
	PostRegister(ctx echo.Context) error
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context, params GetTasksParams) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int32) error
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostActivation converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivation(ctx)
	return err
}

// PostActivationEmail converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivationEmail(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivationEmail(ctx)
	return err
}

// GetAnalyticsFocus converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnalyticsFocus(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalyticsFocusParams
	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnalyticsFocus(ctx, params)
	return err
}

// GetAuthGoogleAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleAuthorize(ctx)
	return err
}

// GetAuthGoogleCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthGoogleCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleCallback(ctx, params)
	return err
}

// PostAuthPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthPasswordReset(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthPasswordReset(ctx)
	return err
}

// PostAuthPasswordResetConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthPasswordResetConfirm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthPasswordResetConfirm(ctx)
	return err
}

// PostAuthRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefreshToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshTokenParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefreshToken(ctx, params)
	return err
}

// PostFocusSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostFocusSessions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFocusSessions(ctx)
	return err
}

// PostFocusSessionsIdEnd converts echo context to params.
func (w *ServerInterfaceWrapper) PostFocusSessionsIdEnd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFocusSessionsIdEnd(ctx, id)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLogoutParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogout(ctx, params)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx, params)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}

// PutTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTasksId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/activation/", wrapper.PostActivation)
	router.POST(baseURL+"/activation/email", wrapper.PostActivationEmail)
	router.GET(baseURL+"/analytics/focus", wrapper.GetAnalyticsFocus)
	router.GET(baseURL+"/auth/google/authorize", wrapper.GetAuthGoogleAuthorize)
	router.GET(baseURL+"/auth/google/callback", wrapper.GetAuthGoogleCallback)
	router.POST(baseURL+"/auth/password-reset", wrapper.PostAuthPasswordReset)
	router.POST(baseURL+"/auth/password-reset/confirm", wrapper.PostAuthPasswordResetConfirm)
	router.POST(baseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	router.POST(baseURL+"/focus-sessions", wrapper.PostFocusSessions)
	router.POST(baseURL+"/focus-sessions/:id/end", wrapper.PostFocusSessionsIdEnd)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/logout", wrapper.PostLogout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PUT(baseURL+"/tasks/:id", wrapper.PutTasksId)

}

type ForbiddenJSONResponse DefaultResponse

type PostActivationRequestObject struct {
	Body *PostActivationJSONRequestBody
}

type PostActivationResponseObject interface {
	VisitPostActivationResponse(w http.ResponseWriter) error
}

type PostActivation200Response struct {
}

func (response PostActivation200Response) VisitPostActivationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostActivation400JSONResponse ActivationError

func (response PostActivation400JSONResponse) VisitPostActivationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostActivationEmailRequestObject struct {
}

type PostActivationEmailResponseObject interface {
	VisitPostActivationEmailResponse(w http.ResponseWriter) error
}

type PostActivationEmail200Response struct {
}

func (response PostActivationEmail200Response) VisitPostActivationEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostActivationEmail400Response struct {
}

func (response PostActivationEmail400Response) VisitPostActivationEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostActivationEmail403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostActivationEmail403JSONResponse) VisitPostActivationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyticsFocusRequestObject struct {
	Params GetAnalyticsFocusParams
}

type GetAnalyticsFocusResponseObject interface {
	VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error
}

type GetAnalyticsFocus200JSONResponse FocusAnalytics

func (response GetAnalyticsFocus200JSONResponse) VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyticsFocus403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetAnalyticsFocus403JSONResponse) VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthGoogleAuthorizeRequestObject struct {
}

type GetAuthGoogleAuthorizeResponseObject interface {
	VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error
}

type GetAuthGoogleAuthorize303ResponseHeaders struct {
	Location  string
	SetCookie string
}

type GetAuthGoogleAuthorize303Response struct {
	Headers GetAuthGoogleAuthorize303ResponseHeaders
}

func (response GetAuthGoogleAuthorize303Response) VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(303)
	return nil
}

type GetAuthGoogleCallbackRequestObject struct {
	Params GetAuthGoogleCallbackParams
}

type GetAuthGoogleCallbackResponseObject interface {
	VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetAuthGoogleCallback200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetAuthGoogleCallback200TexthtmlResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAuthGoogleCallback301ResponseHeaders struct {
	Location string
}

type GetAuthGoogleCallback301Response struct {
	Headers GetAuthGoogleCallback301ResponseHeaders
}

func (response GetAuthGoogleCallback301Response) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type GetAuthGoogleCallback400JSONResponse DefaultResponse

func (response GetAuthGoogleCallback400JSONResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthPasswordResetRequestObject struct {
	Body *PostAuthPasswordResetJSONRequestBody
}

type PostAuthPasswordResetResponseObject interface {
	VisitPostAuthPasswordResetResponse(w http.ResponseWriter) error
}

type PostAuthPasswordReset200Response struct {
}

func (response PostAuthPasswordReset200Response) VisitPostAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAuthPasswordReset400JSONResponse DefaultResponse

func (response PostAuthPasswordReset400JSONResponse) VisitPostAuthPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthPasswordResetConfirmRequestObject struct {
	Body *PostAuthPasswordResetConfirmJSONRequestBody
}

type PostAuthPasswordResetConfirmResponseObject interface {
	VisitPostAuthPasswordResetConfirmResponse(w http.ResponseWriter) error
}

type PostAuthPasswordResetConfirm200Response struct {
}

func (response PostAuthPasswordResetConfirm200Response) VisitPostAuthPasswordResetConfirmResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAuthPasswordResetConfirm400JSONResponse ResetPasswordError

func (response PostAuthPasswordResetConfirm400JSONResponse) VisitPostAuthPasswordResetConfirmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshTokenRequestObject struct {
	Params PostAuthRefreshTokenParams
	Body   *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200ResponseHeaders struct {
	SetCookie string
}

type PostAuthRefreshToken200JSONResponse struct {
	Body    AuthTokens
	Headers PostAuthRefreshToken200ResponseHeaders
}

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthRefreshToken403Response struct {
}

func (response PostAuthRefreshToken403Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostFocusSessionsRequestObject struct {
	Body *PostFocusSessionsJSONRequestBody
}

type PostFocusSessionsResponseObject interface {
	VisitPostFocusSessionsResponse(w http.ResponseWriter) error
}

type PostFocusSessions201JSONResponse FocusSession

func (response PostFocusSessions201JSONResponse) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessions400Response struct {
}

func (response PostFocusSessions400Response) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostFocusSessions403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostFocusSessions403JSONResponse) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessions404Response struct {
}

func (response PostFocusSessions404Response) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostFocusSessionsIdEndRequestObject struct {
	Id   int32 `json:"id"`
	Body *PostFocusSessionsIdEndJSONRequestBody
}

type PostFocusSessionsIdEndResponseObject interface {
	VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error
}

type PostFocusSessionsIdEnd200JSONResponse FocusSession

func (response PostFocusSessionsIdEnd200JSONResponse) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessionsIdEnd400Response struct {
}

func (response PostFocusSessionsIdEnd400Response) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostFocusSessionsIdEnd403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostFocusSessionsIdEnd403JSONResponse) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessionsIdEnd404Response struct {
}

func (response PostFocusSessionsIdEnd404Response) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200ResponseHeaders struct {
	SetCookie string
}

type PostLogin200JSONResponse struct {
	Body    AuthTokens
	Headers PostLogin200ResponseHeaders
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogoutRequestObject struct {
	Params PostLogoutParams
	Body   *PostLogoutJSONRequestBody
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout200ResponseHeaders struct {
	SetCookie string
}

type PostLogout200Response struct {
	Headers PostLogout200ResponseHeaders
}

func (response PostLogout200Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PostLogout403ResponseHeaders struct {
	SetCookie string
}

type PostLogout403Response struct {
	Headers PostLogout403ResponseHeaders
}

func (response PostLogout403Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(403)
	return nil
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse User

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfile403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetProfile403JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201JSONResponse AuthTokens

func (response PostRegister201JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse RegisterError

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksRequestObject struct {
	Params GetTasksParams
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse struct {
	Data       *[]Task             `json:"data,omitempty"`
	Pagination *PaginationResponse `json:"pagination,omitempty"`
}

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasks400Response struct {
}

func (response GetTasks400Response) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTasks403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetTasks403JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks400JSONResponse DefaultResponse

func (response PostTasks400JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostTasks403JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksIdRequestObject struct {
	Id int32 `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(w http.ResponseWriter) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksId403JSONResponse struct{ ForbiddenJSONResponse }

func (response DeleteTasksId403JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksId404JSONResponse DefaultResponse

func (response DeleteTasksId404JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksIdRequestObject struct {
	Id   int32 `json:"id"`
	Body *PutTasksIdJSONRequestBody
}

type PutTasksIdResponseObject interface {
	VisitPutTasksIdResponse(w http.ResponseWriter) error
}

type PutTasksId200Response struct {
}

func (response PutTasksId200Response) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutTasksId403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutTasksId403JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksId404JSONResponse DefaultResponse

func (response PutTasksId404JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Activate user account
	// (POST /activation/)
	PostActivation(ctx context.Context, request PostActivationRequestObject) (PostActivationResponseObject, error)
	// Send activation email
	// (POST /activation/email)
	PostActivationEmail(ctx context.Context, request PostActivationEmailRequestObject) (PostActivationEmailResponseObject, error)
	// Get focus session analytics
	// (GET /analytics/focus)
	GetAnalyticsFocus(ctx context.Context, request GetAnalyticsFocusRequestObject) (GetAnalyticsFocusResponseObject, error)
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx context.Context, request GetAuthGoogleAuthorizeRequestObject) (GetAuthGoogleAuthorizeResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx context.Context, request GetAuthGoogleCallbackRequestObject) (GetAuthGoogleCallbackResponseObject, error)
	// Request password reset email
	// (POST /auth/password-reset)
	PostAuthPasswordReset(ctx context.Context, request PostAuthPasswordResetRequestObject) (PostAuthPasswordResetResponseObject, error)
	// Reset password using token
	// (POST /auth/password-reset/confirm)
	PostAuthPasswordResetConfirm(ctx context.Context, request PostAuthPasswordResetConfirmRequestObject) (PostAuthPasswordResetConfirmResponseObject, error)
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Start a new focus session
	// (POST /focus-sessions)
	PostFocusSessions(ctx context.Context, request PostFocusSessionsRequestObject) (PostFocusSessionsResponseObject, error)
	// End an active focus session
	// (POST /focus-sessions/{id}/end)
	PostFocusSessionsIdEnd(ctx context.Context, request PostFocusSessionsIdEndRequestObject) (PostFocusSessionsIdEndResponseObject, error)
	// Login to the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Get user profile
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Register a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx context.Context, request PutTasksIdRequestObject) (PutTasksIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostActivation operation middleware
func (sh *strictHandler) PostActivation(ctx echo.Context) error {
	var request PostActivationRequestObject

	var body PostActivationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActivation(ctx.Request().Context(), request.(PostActivationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActivation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostActivationResponseObject); ok {
		return validResponse.VisitPostActivationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostActivationEmail operation middleware
func (sh *strictHandler) PostActivationEmail(ctx echo.Context) error {
	var request PostActivationEmailRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostActivationEmail(ctx.Request().Context(), request.(PostActivationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostActivationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostActivationEmailResponseObject); ok {
		return validResponse.VisitPostActivationEmailResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAnalyticsFocus operation middleware
func (sh *strictHandler) GetAnalyticsFocus(ctx echo.Context, params GetAnalyticsFocusParams) error {
	var request GetAnalyticsFocusRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnalyticsFocus(ctx.Request().Context(), request.(GetAnalyticsFocusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnalyticsFocus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAnalyticsFocusResponseObject); ok {
		return validResponse.VisitGetAnalyticsFocusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthGoogleAuthorize operation middleware
func (sh *strictHandler) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var request GetAuthGoogleAuthorizeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleAuthorize(ctx.Request().Context(), request.(GetAuthGoogleAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleAuthorizeResponseObject); ok {
		return validResponse.VisitGetAuthGoogleAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthGoogleCallback operation middleware
func (sh *strictHandler) GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error {
	var request GetAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleCallback(ctx.Request().Context(), request.(GetAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleCallbackResponseObject); ok {
		return validResponse.VisitGetAuthGoogleCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthPasswordReset operation middleware
func (sh *strictHandler) PostAuthPasswordReset(ctx echo.Context) error {
	var request PostAuthPasswordResetRequestObject

	var body PostAuthPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthPasswordReset(ctx.Request().Context(), request.(PostAuthPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthPasswordResetResponseObject); ok {
		return validResponse.VisitPostAuthPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthPasswordResetConfirm operation middleware
func (sh *strictHandler) PostAuthPasswordResetConfirm(ctx echo.Context) error {
	var request PostAuthPasswordResetConfirmRequestObject

	var body PostAuthPasswordResetConfirmJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthPasswordResetConfirm(ctx.Request().Context(), request.(PostAuthPasswordResetConfirmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthPasswordResetConfirm")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthPasswordResetConfirmResponseObject); ok {
		return validResponse.VisitPostAuthPasswordResetConfirmResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error {
	var request PostAuthRefreshTokenRequestObject

	request.Params = params

	var body PostAuthRefreshTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx.Request().Context(), request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		return validResponse.VisitPostAuthRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFocusSessions operation middleware
func (sh *strictHandler) PostFocusSessions(ctx echo.Context) error {
	var request PostFocusSessionsRequestObject

	var body PostFocusSessionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFocusSessions(ctx.Request().Context(), request.(PostFocusSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFocusSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFocusSessionsResponseObject); ok {
		return validResponse.VisitPostFocusSessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFocusSessionsIdEnd operation middleware
func (sh *strictHandler) PostFocusSessionsIdEnd(ctx echo.Context, id int32) error {
	var request PostFocusSessionsIdEndRequestObject

	request.Id = id

	var body PostFocusSessionsIdEndJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFocusSessionsIdEnd(ctx.Request().Context(), request.(PostFocusSessionsIdEndRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFocusSessionsIdEnd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFocusSessionsIdEndResponseObject); ok {
		return validResponse.VisitPostFocusSessionsIdEndResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx echo.Context) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.Request().Context(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		return validResponse.VisitPostLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx echo.Context, params PostLogoutParams) error {
	var request PostLogoutRequestObject

	request.Params = params

	var body PostLogoutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.Request().Context(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		return validResponse.VisitPostLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx echo.Context) error {
	var request GetProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx.Request().Context(), request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		return validResponse.VisitGetProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx echo.Context) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.Request().Context(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		return validResponse.VisitPostRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context, params GetTasksParams) error {
	var request GetTasksRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx echo.Context, id int32) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.Request().Context(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		return validResponse.VisitDeleteTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTasksId operation middleware
func (sh *strictHandler) PutTasksId(ctx echo.Context, id int32) error {
	var request PutTasksIdRequestObject

	request.Id = id

	var body PutTasksIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksId(ctx.Request().Context(), request.(PutTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTasksIdResponseObject); ok {
		return validResponse.VisitPutTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
