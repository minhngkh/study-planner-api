// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx echo.Context) error
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error
	// Login to the system
	// (POST /login)
	PostLogin(ctx echo.Context) error
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx echo.Context, params PostLogoutParams) error
	// Get user profile
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// Register a new user
	// (POST /register)
	PostRegister(ctx echo.Context) error
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int32) error
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAuthGoogleAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleAuthorize(ctx)
	return err
}

// GetAuthGoogleCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthGoogleCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleCallback(ctx, params)
	return err
}

// PostAuthRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefreshToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshTokenParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefreshToken(ctx, params)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLogoutParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogout(ctx, params)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}

// PutTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTasksId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/google/authorize", wrapper.GetAuthGoogleAuthorize)
	router.GET(baseURL+"/auth/google/callback", wrapper.GetAuthGoogleCallback)
	router.POST(baseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/logout", wrapper.PostLogout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PUT(baseURL+"/tasks/:id", wrapper.PutTasksId)

}

type UnauthorizedJSONResponse DefaultResponse

type GetAuthGoogleAuthorizeRequestObject struct {
}

type GetAuthGoogleAuthorizeResponseObject interface {
	VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error
}

type GetAuthGoogleAuthorize303ResponseHeaders struct {
	Location  string
	SetCookie string
}

type GetAuthGoogleAuthorize303Response struct {
	Headers GetAuthGoogleAuthorize303ResponseHeaders
}

func (response GetAuthGoogleAuthorize303Response) VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(303)
	return nil
}

type GetAuthGoogleCallbackRequestObject struct {
	Params GetAuthGoogleCallbackParams
}

type GetAuthGoogleCallbackResponseObject interface {
	VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetAuthGoogleCallback200JSONResponse AuthTokens

func (response GetAuthGoogleCallback200JSONResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthGoogleCallback301ResponseHeaders struct {
	Location string
}

type GetAuthGoogleCallback301Response struct {
	Headers GetAuthGoogleCallback301ResponseHeaders
}

func (response GetAuthGoogleCallback301Response) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type GetAuthGoogleCallback400JSONResponse DefaultResponse

func (response GetAuthGoogleCallback400JSONResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshTokenRequestObject struct {
	Params PostAuthRefreshTokenParams
	Body   *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200JSONResponse AuthTokens

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken401Response struct {
}

func (response PostAuthRefreshToken401Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuthRefreshToken403Response struct {
}

func (response PostAuthRefreshToken403Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse AuthTokens

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogoutRequestObject struct {
	Params PostLogoutParams
	Body   *PostLogoutJSONRequestBody
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout200Response struct {
}

func (response PostLogout200Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostLogout401Response struct {
}

func (response PostLogout401Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse User

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfile401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetProfile401JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201JSONResponse AuthTokens

func (response PostRegister201JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse RegisterError

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksRequestObject struct {
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasks401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetTasks401JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks400JSONResponse DefaultResponse

func (response PostTasks400JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostTasks401JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksIdRequestObject struct {
	Id int32 `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(w http.ResponseWriter) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteTasksId401JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksId404JSONResponse DefaultResponse

func (response DeleteTasksId404JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksIdRequestObject struct {
	Id   int32 `json:"id"`
	Body *PutTasksIdJSONRequestBody
}

type PutTasksIdResponseObject interface {
	VisitPutTasksIdResponse(w http.ResponseWriter) error
}

type PutTasksId200Response struct {
}

func (response PutTasksId200Response) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutTasksId401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutTasksId401JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksId404JSONResponse DefaultResponse

func (response PutTasksId404JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx context.Context, request GetAuthGoogleAuthorizeRequestObject) (GetAuthGoogleAuthorizeResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx context.Context, request GetAuthGoogleCallbackRequestObject) (GetAuthGoogleCallbackResponseObject, error)
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Login to the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Get user profile
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Register a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx context.Context, request PutTasksIdRequestObject) (PutTasksIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthGoogleAuthorize operation middleware
func (sh *strictHandler) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var request GetAuthGoogleAuthorizeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleAuthorize(ctx.Request().Context(), request.(GetAuthGoogleAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleAuthorizeResponseObject); ok {
		return validResponse.VisitGetAuthGoogleAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthGoogleCallback operation middleware
func (sh *strictHandler) GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error {
	var request GetAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleCallback(ctx.Request().Context(), request.(GetAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleCallbackResponseObject); ok {
		return validResponse.VisitGetAuthGoogleCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error {
	var request PostAuthRefreshTokenRequestObject

	request.Params = params

	var body PostAuthRefreshTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx.Request().Context(), request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		return validResponse.VisitPostAuthRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx echo.Context) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.Request().Context(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		return validResponse.VisitPostLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx echo.Context, params PostLogoutParams) error {
	var request PostLogoutRequestObject

	request.Params = params

	var body PostLogoutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.Request().Context(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		return validResponse.VisitPostLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx echo.Context) error {
	var request GetProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx.Request().Context(), request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		return validResponse.VisitGetProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx echo.Context) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.Request().Context(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		return validResponse.VisitPostRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context) error {
	var request GetTasksRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx echo.Context, id int32) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.Request().Context(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		return validResponse.VisitDeleteTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTasksId operation middleware
func (sh *strictHandler) PutTasksId(ctx echo.Context, id int32) error {
	var request PutTasksIdRequestObject

	request.Id = id

	var body PutTasksIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksId(ctx.Request().Context(), request.(PutTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTasksIdResponseObject); ok {
		return validResponse.VisitPutTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FHJQ2Ls1XOY3i78CAAD///AEKa3EIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
