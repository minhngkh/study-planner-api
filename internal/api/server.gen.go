// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get focus session analytics
	// (GET /analytics/focus)
	GetAnalyticsFocus(ctx echo.Context, params GetAnalyticsFocusParams) error
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx echo.Context) error
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error
	// Start a new focus session
	// (POST /focus-sessions)
	PostFocusSessions(ctx echo.Context) error
	// End an active focus session
	// (POST /focus-sessions/{id}/end)
	PostFocusSessionsIdEnd(ctx echo.Context, id int32) error
	// Login to the system
	// (POST /login)
	PostLogin(ctx echo.Context) error
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx echo.Context, params PostLogoutParams) error
	// Get user profile
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// Register a new user
	// (POST /register)
	PostRegister(ctx echo.Context) error
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context, params GetTasksParams) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int32) error
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAnalyticsFocus converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnalyticsFocus(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalyticsFocusParams
	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnalyticsFocus(ctx, params)
	return err
}

// GetAuthGoogleAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleAuthorize(ctx)
	return err
}

// GetAuthGoogleCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthGoogleCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthGoogleCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthGoogleCallback(ctx, params)
	return err
}

// PostAuthRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefreshToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRefreshTokenParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefreshToken(ctx, params)
	return err
}

// PostFocusSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostFocusSessions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFocusSessions(ctx)
	return err
}

// PostFocusSessionsIdEnd converts echo context to params.
func (w *ServerInterfaceWrapper) PostFocusSessionsIdEnd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFocusSessionsIdEnd(ctx, id)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLogoutParams

	if cookie, err := ctx.Cookie("refresh_token"); err == nil {

		var value string
		err = runtime.BindStyledParameterWithOptions("simple", "refresh_token", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refresh_token: %s", err))
		}
		params.RefreshToken = &value

	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLogout(ctx, params)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", ctx.QueryParams(), &params.Priority)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter priority: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasks(ctx, params)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}

// PutTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTasksId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/analytics/focus", wrapper.GetAnalyticsFocus)
	router.GET(baseURL+"/auth/google/authorize", wrapper.GetAuthGoogleAuthorize)
	router.GET(baseURL+"/auth/google/callback", wrapper.GetAuthGoogleCallback)
	router.POST(baseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	router.POST(baseURL+"/focus-sessions", wrapper.PostFocusSessions)
	router.POST(baseURL+"/focus-sessions/:id/end", wrapper.PostFocusSessionsIdEnd)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/logout", wrapper.PostLogout)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PUT(baseURL+"/tasks/:id", wrapper.PutTasksId)

}

type ForbiddenJSONResponse DefaultResponse

type GetAnalyticsFocusRequestObject struct {
	Params GetAnalyticsFocusParams
}

type GetAnalyticsFocusResponseObject interface {
	VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error
}

type GetAnalyticsFocus200JSONResponse FocusAnalytics

func (response GetAnalyticsFocus200JSONResponse) VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAnalyticsFocus403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetAnalyticsFocus403JSONResponse) VisitGetAnalyticsFocusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthGoogleAuthorizeRequestObject struct {
}

type GetAuthGoogleAuthorizeResponseObject interface {
	VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error
}

type GetAuthGoogleAuthorize303ResponseHeaders struct {
	Location  string
	SetCookie string
}

type GetAuthGoogleAuthorize303Response struct {
	Headers GetAuthGoogleAuthorize303ResponseHeaders
}

func (response GetAuthGoogleAuthorize303Response) VisitGetAuthGoogleAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(303)
	return nil
}

type GetAuthGoogleCallbackRequestObject struct {
	Params GetAuthGoogleCallbackParams
}

type GetAuthGoogleCallbackResponseObject interface {
	VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetAuthGoogleCallback200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetAuthGoogleCallback200TexthtmlResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAuthGoogleCallback301ResponseHeaders struct {
	Location string
}

type GetAuthGoogleCallback301Response struct {
	Headers GetAuthGoogleCallback301ResponseHeaders
}

func (response GetAuthGoogleCallback301Response) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type GetAuthGoogleCallback400JSONResponse DefaultResponse

func (response GetAuthGoogleCallback400JSONResponse) VisitGetAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshTokenRequestObject struct {
	Params PostAuthRefreshTokenParams
	Body   *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200ResponseHeaders struct {
	SetCookie string
}

type PostAuthRefreshToken200JSONResponse struct {
	Body    AuthTokens
	Headers PostAuthRefreshToken200ResponseHeaders
}

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthRefreshToken403Response struct {
}

func (response PostAuthRefreshToken403Response) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostFocusSessionsRequestObject struct {
	Body *PostFocusSessionsJSONRequestBody
}

type PostFocusSessionsResponseObject interface {
	VisitPostFocusSessionsResponse(w http.ResponseWriter) error
}

type PostFocusSessions201JSONResponse FocusSession

func (response PostFocusSessions201JSONResponse) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessions400Response struct {
}

func (response PostFocusSessions400Response) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostFocusSessions403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostFocusSessions403JSONResponse) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessions404Response struct {
}

func (response PostFocusSessions404Response) VisitPostFocusSessionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostFocusSessionsIdEndRequestObject struct {
	Id int32 `json:"id"`
}

type PostFocusSessionsIdEndResponseObject interface {
	VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error
}

type PostFocusSessionsIdEnd200JSONResponse FocusSession

func (response PostFocusSessionsIdEnd200JSONResponse) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessionsIdEnd400Response struct {
}

func (response PostFocusSessionsIdEnd400Response) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostFocusSessionsIdEnd403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostFocusSessionsIdEnd403JSONResponse) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostFocusSessionsIdEnd404Response struct {
}

func (response PostFocusSessionsIdEnd404Response) VisitPostFocusSessionsIdEndResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200ResponseHeaders struct {
	SetCookie string
}

type PostLogin200JSONResponse struct {
	Body    AuthTokens
	Headers PostLogin200ResponseHeaders
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogoutRequestObject struct {
	Params PostLogoutParams
	Body   *PostLogoutJSONRequestBody
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout200ResponseHeaders struct {
	SetCookie string
}

type PostLogout200Response struct {
	Headers PostLogout200ResponseHeaders
}

func (response PostLogout200Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type PostLogout403ResponseHeaders struct {
	SetCookie string
}

type PostLogout403Response struct {
	Headers PostLogout403ResponseHeaders
}

func (response PostLogout403Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(403)
	return nil
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse User

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfile403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetProfile403JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister201JSONResponse AuthTokens

func (response PostRegister201JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse RegisterError

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksRequestObject struct {
	Params GetTasksParams
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse struct {
	Data       *[]Task             `json:"data,omitempty"`
	Pagination *PaginationResponse `json:"pagination,omitempty"`
}

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasks400Response struct {
}

func (response GetTasks400Response) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetTasks403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetTasks403JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks400JSONResponse DefaultResponse

func (response PostTasks400JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTasks403JSONResponse struct{ ForbiddenJSONResponse }

func (response PostTasks403JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksIdRequestObject struct {
	Id int32 `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(w http.ResponseWriter) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksId403JSONResponse struct{ ForbiddenJSONResponse }

func (response DeleteTasksId403JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksId404JSONResponse DefaultResponse

func (response DeleteTasksId404JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksIdRequestObject struct {
	Id   int32 `json:"id"`
	Body *PutTasksIdJSONRequestBody
}

type PutTasksIdResponseObject interface {
	VisitPutTasksIdResponse(w http.ResponseWriter) error
}

type PutTasksId200Response struct {
}

func (response PutTasksId200Response) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutTasksId403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutTasksId403JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutTasksId404JSONResponse DefaultResponse

func (response PutTasksId404JSONResponse) VisitPutTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get focus session analytics
	// (GET /analytics/focus)
	GetAnalyticsFocus(ctx context.Context, request GetAnalyticsFocusRequestObject) (GetAnalyticsFocusResponseObject, error)
	// Initiate Google OAuth2 login flow
	// (GET /auth/google/authorize)
	GetAuthGoogleAuthorize(ctx context.Context, request GetAuthGoogleAuthorizeRequestObject) (GetAuthGoogleAuthorizeResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /auth/google/callback)
	GetAuthGoogleCallback(ctx context.Context, request GetAuthGoogleCallbackRequestObject) (GetAuthGoogleCallbackResponseObject, error)
	// Get new access and refresh tokens using refresh token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Start a new focus session
	// (POST /focus-sessions)
	PostFocusSessions(ctx context.Context, request PostFocusSessionsRequestObject) (PostFocusSessionsResponseObject, error)
	// End an active focus session
	// (POST /focus-sessions/{id}/end)
	PostFocusSessionsIdEnd(ctx context.Context, request PostFocusSessionsIdEndRequestObject) (PostFocusSessionsIdEndResponseObject, error)
	// Login to the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logout and invalidate refresh token
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Get user profile
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Register a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get list of user's tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Update an existing task
	// (PUT /tasks/{id})
	PutTasksId(ctx context.Context, request PutTasksIdRequestObject) (PutTasksIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAnalyticsFocus operation middleware
func (sh *strictHandler) GetAnalyticsFocus(ctx echo.Context, params GetAnalyticsFocusParams) error {
	var request GetAnalyticsFocusRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnalyticsFocus(ctx.Request().Context(), request.(GetAnalyticsFocusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnalyticsFocus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAnalyticsFocusResponseObject); ok {
		return validResponse.VisitGetAnalyticsFocusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthGoogleAuthorize operation middleware
func (sh *strictHandler) GetAuthGoogleAuthorize(ctx echo.Context) error {
	var request GetAuthGoogleAuthorizeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleAuthorize(ctx.Request().Context(), request.(GetAuthGoogleAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleAuthorizeResponseObject); ok {
		return validResponse.VisitGetAuthGoogleAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuthGoogleCallback operation middleware
func (sh *strictHandler) GetAuthGoogleCallback(ctx echo.Context, params GetAuthGoogleCallbackParams) error {
	var request GetAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthGoogleCallback(ctx.Request().Context(), request.(GetAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuthGoogleCallbackResponseObject); ok {
		return validResponse.VisitGetAuthGoogleCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(ctx echo.Context, params PostAuthRefreshTokenParams) error {
	var request PostAuthRefreshTokenRequestObject

	request.Params = params

	var body PostAuthRefreshTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx.Request().Context(), request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		return validResponse.VisitPostAuthRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFocusSessions operation middleware
func (sh *strictHandler) PostFocusSessions(ctx echo.Context) error {
	var request PostFocusSessionsRequestObject

	var body PostFocusSessionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFocusSessions(ctx.Request().Context(), request.(PostFocusSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFocusSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFocusSessionsResponseObject); ok {
		return validResponse.VisitPostFocusSessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFocusSessionsIdEnd operation middleware
func (sh *strictHandler) PostFocusSessionsIdEnd(ctx echo.Context, id int32) error {
	var request PostFocusSessionsIdEndRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFocusSessionsIdEnd(ctx.Request().Context(), request.(PostFocusSessionsIdEndRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFocusSessionsIdEnd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFocusSessionsIdEndResponseObject); ok {
		return validResponse.VisitPostFocusSessionsIdEndResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx echo.Context) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.Request().Context(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		return validResponse.VisitPostLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx echo.Context, params PostLogoutParams) error {
	var request PostLogoutRequestObject

	request.Params = params

	var body PostLogoutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.Request().Context(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		return validResponse.VisitPostLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx echo.Context) error {
	var request GetProfileRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx.Request().Context(), request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		return validResponse.VisitGetProfileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx echo.Context) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.Request().Context(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		return validResponse.VisitPostRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context, params GetTasksParams) error {
	var request GetTasksRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx echo.Context, id int32) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.Request().Context(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		return validResponse.VisitDeleteTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTasksId operation middleware
func (sh *strictHandler) PutTasksId(ctx echo.Context, id int32) error {
	var request PutTasksIdRequestObject

	request.Id = id

	var body PutTasksIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksId(ctx.Request().Context(), request.(PutTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTasksIdResponseObject); ok {
		return validResponse.VisitPutTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ubw5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
