openapi: "3.0.0"
info:
  version: 1.0.0
  title: Study Planer API
servers:
  - url: http://localhost:4000
tags:
  - name: auth
    description: Authentication operations
  - name: user
    description: User operations
  - name: tasks
    description: Task management operations
  - name: focus
    description: Focus session operations
  - name: analytics
    description: Analytics operations
paths:
  /login:
    post:
      tags:
        - auth
      summary: Login to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: LoginInfo
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: login response
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          description: Invalid email/password supplied
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: RegisterInfo
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "201":
          description: registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          description: Registration validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterError"
              example:
                type: DuplicateEmail
                message: Email already exists
  /activation/email:
    post:
      tags:
        - auth
      summary: Send activation email
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Activation email sent successfully
        '400':
          description: Email already activated or too many requests
        '403':
          $ref: '#/components/responses/Forbidden'
  /activation/:
    post:
      tags:
        - auth
      summary: Activate user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - token
              properties:
                user_id:
                  type: integer
                  x-go-type: int32
                  description: User ID
                token:
                  type: string
                  description: Activation token sent via email
      responses:
        '200':
          description: Account activated successfully
        '400':
          description: Invalid or expired activation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationError'
              example:
                type: ExpiredToken

  /auth/password-reset:
    post:
      tags:
        - auth
      summary: Request password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent successfully
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  /auth/password-reset/confirm:
    post:
      tags:
        - auth
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_password
              properties:
                token:
                  type: string
                  description: Reset token received via email
                new_password:
                  type: string
                  description: New password to set
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid/expired token or password validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'
              example:
                type: ExpiredToken
  /profile:
    get:
      tags:
        - user
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/Forbidden"
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Get new access and refresh tokens using refresh token
      description: |
        This endpoint accepts the refresh token from either the request body or cookie.
        If both are present, the request body takes precedence.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              title: RefreshTokenRequest
              type: object
              properties:
                refresh_token:
                  type: string
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          description: Refresh token stored in cookie
      responses:
        "200":
          description: New tokens generated successfully
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "403":
          description: Invalid or expired refresh token
  /logout:
    post:
      tags:
        - auth
      summary: Logout and invalidate refresh token
      description: |
        This endpoint accepts the refresh token from either the request body or cookie.
        If both are present, the request body takes precedence.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              title: LogoutRequest
              type: object
              properties:
                refresh_token:
                  type: string
      parameters:
        - in: cookie
          name: refresh_token
          schema:
            type: string
          description: Refresh token stored in cookie
      responses:
        "200":
          description: Successfully logged out
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Delete refresh token cookie
        "403":
          description: Invalid or expired refresh token
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Delete refresh token cookie
  /tasks:
    get:
      tags:
        - tasks
      summary: Get list of user's tasks
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter tasks by name or description
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TaskStatus"
          description: Filter tasks by status
        - name: priority
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TaskPriority"
          description: Filter tasks by priority
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter tasks by start date (inclusive)
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter tasks by end date (inclusive)
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [created_at, start_time, end_time, priority]
            default: created_at
          description: Field to sort by
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        "200":
          description: List of tasks with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
                  pagination:
                    $ref: "#/components/schemas/PaginationResponse"
        "400":
          description: Invalid input
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      tags:
        - tasks
      summary: Create a new task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskRequest"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
        "403":
          $ref: "#/components/responses/Forbidden"
  /tasks/{id}:
    put:
      tags:
        - tasks
      summary: Update an existing task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            x-go-type: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskRequest"
      responses:
        "200":
          description: Task updated successfully
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
    delete:
      tags:
        - tasks
      summary: Delete a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            x-go-type: int32
      responses:
        "204":
          description: Task deleted successfully
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /auth/google/authorize:
    get:
      tags:
        - auth
      summary: Initiate Google OAuth2 login flow
      description: Redirects the user to Google's login page
      responses:
        "303":
          description: Redirect to Google login page
          headers:
            Set-Cookie:
              schema:
                type: string
              description: CSRF token cookie
            Location:
              schema:
                type: string
              description: Google OAuth2 authorization URL
  /auth/google/callback:
    get:
      tags:
        - auth
      summary: Handle Google OAuth2 callback
      description: Handles the callback from Google OAuth2 and creates/logs in the user
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from Google
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        "200":
          description: User logged in successfully
          content:
            text/html:
              schema:
                type: string
                example: Authenticated with Google successfully
        "301":
          description: Redirect to frontend with auth tokens in URL
          headers:
            Location:
              schema:
                type: string
                example: https://website.com#access_token=...&refresh_token=...
              description: Frontend URL with auth tokens

        "400":
          description: Invalid authorization code or state mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /focus-sessions:
    post:
      tags:
        - focus
      summary: Start a new focus session
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFocusSessionRequest"
      responses:
        "201":
          description: Focus session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FocusSession"
        "400":
          description: Invalid input or task not in progress
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Task not found or task not belong to user
  /focus-sessions/{id}/end:
    post:
      tags:
        - focus
      summary: End an active focus session
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            x-go-type: int32
      requestBody:
        description: Only include the body if you want to end the session early, otherwise send request without it
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndFocusSessionRequest"
      responses:
        "200":
          description: Focus session ended successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FocusSession"
        "400":
          description: Invalid input or session is not active
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Session not found or not belong to user
  /analytics/focus:
    get:
      tags:
        - analytics
      summary: Get focus session analytics
      security:
        - bearerAuth: []
      parameters:
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Focus session analytics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FocusAnalytics"
        "403":
          $ref: "#/components/responses/Forbidden"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
  responses:
    NotFound:
      description: Endpoint not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponse"
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponse"
    Forbidden:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponse"
  parameters:
    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number
    LimitParam:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Number of items per page
  schemas:
    AuthTokens:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    DefaultResponse:
      type: object
      properties:
        message:
          type: string
    RegisterError:
      type: object
      properties:
        type:
          type: string
          enum:
            - DuplicateEmail
            - InvalidEmail
            - InvalidPassword
        message:
          type: string
    ResetPasswordError:
      type: object
      properties:
        type:
          type: string
          enum:
            - InvalidToken
            - ExpiredToken
            - InvalidPassword
        message:
          type: string
    ActivationError:
      type: object
      properties:
        type:
          type: string
          enum:
            - InvalidToken
            - ExpiredToken
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          x-go-type: int32
          x-go-name: ID
        email:
          type: string
        created_at:
          type: string
          format: date-time
        is_activated:
          type: boolean
          description: Whether the user's email is activated
    TaskPriority:
      type: string
      enum: ["High", "Medium", "Low"]
      x-go-type: string
    TaskStatus:
      type: string
      enum: ["Todo", "In Progress", "Completed", "Expired"]
      x-go-type: string
    Task:
      type: object
      properties:
        id:
          type: integer
          x-go-type: int32
        user_id:
          type: integer
          x-go-type: int32
        name:
          type: string
        description:
          type: string
        priority:
          $ref: "#/components/schemas/TaskPriority"
        estimated_time:
          type: integer
          x-go-type: int32
          description: Estimated time in minutes
        status:
          $ref: "#/components/schemas/TaskStatus"
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateTaskRequest:
      type: object
      required:
        - name
        - priority
        - status
      properties:
        name:
          type: string
        description:
          type: string
        priority:
          $ref: "#/components/schemas/TaskPriority"
        estimated_time:
          type: integer
          x-go-type: int32
          description: Estimated time in minutes
        status:
          $ref: "#/components/schemas/TaskStatus"
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    UpdateTaskRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        priority:
          $ref: "#/components/schemas/TaskPriority"
        estimated_time:
          type: integer
          x-go-type: int32
          description: Estimated time in minutes
        status:
          $ref: "#/components/schemas/TaskStatus"
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    PaginationResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total_pages:
          type: integer
          description: Total number of pages
    FocusSessionStatus:
      type: string
      enum: ["active", "completed", "ended_early"]
      x-go-type: string

    FocusSession:
      type: object
      properties:
        id:
          type: integer
          x-go-type: int32
        user_id:
          type: integer
          x-go-type: int32
        task_id:
          type: integer
          x-go-type: int32
        timer_duration:
          type: integer
          description: Duration in seconds
          x-go-type: int32
        break_duration:
          type: integer
          description: Break duration in seconds
          x-go-type: int32
        status:
          $ref: "#/components/schemas/FocusSessionStatus"
        focus_duration:
          type: integer
          description: Elapsed focus duration in seconds
          x-go-type: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateFocusSessionRequest:
      type: object
      required:
        - task_id
        - timer_duration
      properties:
        task_id:
          type: integer
          x-go-type: int32
        timer_duration:
          type: integer
          description: Duration in seconds
          x-go-type: int32
        break_duration:
          type: integer
          description: Break duration in seconds
          x-go-type: int32

    EndFocusSessionRequest:
      type: object
      properties:
        focus_duration:
          type: integer
          description: Elapsed focus duration in seconds for early ending
          x-go-type: int32

    FocusAnalytics:
      type: object
      properties:
        total_time_spent:
          type: integer
          description: Total time spent in seconds
          x-go-type: int32
        total_estimated_time:
          type: integer
          description: Total estimated time in seconds
          x-go-type: int32
        daily_time_spent:
          type: object
          additionalProperties:
            type: integer
          description: Map of dates to seconds spent
        task_status_counts:
          type: object
          additionalProperties:
            type: integer
          description: Count of tasks in each status
        ai_feedback:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
            improvement_areas:
              type: array
              items:
                type: string
            motivation:
              type: string
